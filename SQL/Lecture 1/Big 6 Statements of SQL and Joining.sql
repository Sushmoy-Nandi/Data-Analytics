SELECT * FROM sakila.film;

SELECT * FROM SAKILA.FILM;
USE SAKILA;

SELECT 
    TITLE, RELEASE_YEAR, LENGTH, RATING
FROM
    FILM
WHERE
	RELEASE_YEAR = 2006;
    
SELECT DISTINCT RELEASE_YEAR FROM FILM;

SELECT 
    TITLE, RELEASE_YEAR, LENGTH, RATING
FROM
    FILM
WHERE
	LENGTH BETWEEN 160 AND 170
ORDER BY LENGTH DESC;

SELECT 
    TITLE, RELEASE_YEAR, LENGTH, RATING
FROM
    FILM
WHERE
	LENGTH >160 AND LENGTH <170
ORDER BY LENGTH;


SELECT COUNT(*) FROM FILM; -- ROW COUNT IN THE TABLE:1000

SELECT * FROM LANGUAGE;

SELECT 
    F.TITLE, 
    F.RELEASE_YEAR, 
    F.LENGTH, 
    F.RATING,
    L.NAME AS LANGUAGE
FROM
    FILM F
LEFT JOIN LANGUAGE L ON F.LANGUAGE_ID = L.LANGUAGE_ID;
    
-- WHICH LANGUAGE HAS HOW MANY MOVIES RELEASED IN 2006?

SELECT 
    L.NAME AS LANGUAGE,
    COUNT(*) AS NUMBER_OF_MOVIE_RELEASED
FROM
    FILM F
LEFT JOIN LANGUAGE L ON F.LANGUAGE_ID = L.LANGUAGE_ID
GROUP BY L.NAME;


SELECT * FROM FILM_ACTOR;

SELECT
	FA.ACTOR_ID,
    CONCAT(A.FIRST_NAME, ' ', A.LAST_NAME) AS ACTOR_NAME,
    COUNT(*) AS NUMBER_OF_MOVIES_ACTED_ON
FROM FILM_ACTOR FA
LEFT JOIN ACTOR A ON FA.ACTOR_ID = A.ACTOR_ID
GROUP BY ACTOR_ID, ACTOR_NAME
HAVING NUMBER_OF_MOVIES_ACTED_ON > 30
ORDER BY COUNT(*) DESC;

/* BIG 6 STATEMENT OF SQL: 
- SELECT
- FROM
- WHERE
- GROUP BY
- ORDER BY
- HAVING
*/

-- EXPLAIN THE DIFFERENCE BETWEEN 'WHERE' AND 'HAVING' WITH AN EXAMPLE 
-- WHERE: WHEN WE NEED TO FILTER OUT DATA FROM RAW TABLES
-- HAVING: FILTER OUT FROM AGGREGATED DATA [AFTER GROUP BY AND AGGREGATION]